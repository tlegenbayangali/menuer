import { createClient } from '@supabase/supabase-js'
import * as fs from 'fs'
import * as path from 'path'
import * as dotenv from 'dotenv'

// Load environment variables from .env.local
dotenv.config({ path: '.env.local' })

// Initialize Supabase client
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Missing Supabase credentials in .env.local')
  console.error(`URL: ${supabaseUrl ? 'OK' : 'MISSING'}`)
  console.error(`KEY: ${supabaseKey ? 'OK' : 'MISSING'}`)
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

interface Menu {
  name: string
  price: number
  description: string
  dishes: string[]
}

const menusData: Menu[] = [
  {
    name: '–ë–∞–Ω–∫–µ—Ç 7500',
    price: 7500,
    description: '7500 —Ç–≥/—á–µ–ª + –Ω–∞–ø–∏—Ç–∫–∏ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞',
    dishes: [
      '–ë–µ—à–ø–∞—Ä–º–∞–∫',
      '–§—Ä–∏–∫–∞—Å–µ —Å –∫—É—Ä–∏—Ü–µ–π, –≥—Ä–∏–±–∞–º–∏ –≤ —Å–ª–∏–≤–æ—á–Ω–æ–º —Å–æ—É—Å–µ',
      '–ê—Å—Å–æ—Ä—Ç–∏ (–±–µ–¥—Ä–æ –∑–∞–ø–µ—á–µ–Ω–Ω–æ–µ —Å –±–∞—Ä–±–µ–∫—é, —á–∏–≤–∞–ø—á–∏—á–∏, –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å –ø–æ-–¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∏)',
      'KFC —Å –Ω–∞–≥–≥–µ—Ç—Å–∞–º–∏ –∏ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω—ã–º–∏ —à–∞—Ä–∏–∫–∞–º–∏',
      '–ú—è—Å–Ω–∞—è –Ω–∞—Ä–µ–∑–∫–∞ (–∫–∞–∑—ã, —Å—ã—Ä, –∫—É—Ä–∏–Ω—ã–π —Ä—É–ª–µ—Ç)',
      '–†—É—Å—Å–∫–∞—è –∑–∞–∫—É—Å–∫–∞ (—Å–µ–ª—å–¥—å, –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å, –æ–≥—É—Ä—Ü—ã —Å–æ–ª–µ–Ω—ã–µ)',
      '–ë—É—Ç–µ—Ä–±—Ä–æ–¥–∏–∫–∏-–∫–æ—Ä–∞–±–ª–∏–∫–∏ —Å —Å–µ–ª–µ–¥–∫–æ–π',
      '–ú–æ—Ä–∫–æ–≤—å –ø–æ-–∫–æ—Ä–µ–π—Å–∫–∏',
      '–ö–∞–ø—É—Å—Ç–∞ –ø–æ-–∫–æ—Ä–µ–π—Å–∫–∏',
      '–ö–æ—Ä–Ω–∏—à–æ–Ω—ã',
      '–§—É–Ω—á–æ–∑–∞ –ø–æ-–∫–æ—Ä–µ–π—Å–∫–∏',
      '–°–∞–ª–∞—Ç –ê—Ç–∞-–ê–Ω–∞',
      '–°–∞–ª–∞—Ç –ê—Å—Å–æ—Ä—Ç–∏',
      '–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å',
      '–°–∞–ª–∞—Ç –ê–ª–∞—Ç–∞—É',
      '–°–∞–ª–∞—Ç –ú–∞–ª–∏–±—É',
      '–°–∞–ª–∞—Ç –ù–µ–∂–Ω–æ—Å—Ç—å',
      '–°–∞–ª–∞—Ç –î–∞–º—Å–∫–∏–π –∫–∞–ø—Ä–∏–∑',
      '–°–∞–ª–∞—Ç –ë–µ—Ä–µ–∑–∞',
      '–°–∞–ª–∞—Ç –õ—é–±–æ–≤–Ω–∏—Ü–∞',
      '–°–∞–ª–∞—Ç –ì—Ä–µ—á–µ—Å–∫–∏–π',
      '–°–∞–ª–∞—Ç –ê–∑–∏—è',
      '–°–∞–ª–∞—Ç –¢–±–∏–ª–∏—Å–∏',
      '–•–∏—Ç-—Å–∞–ª–∞—Ç —Å —Ö—Ä—É—Å—Ç—è—â–∏–º–∏ –±–∞–∫–ª–∞–∂–∞–Ω–∞–º–∏',
      '–§—Ä—É–∫—Ç–æ–≤–∞—è –Ω–∞—Ä–µ–∑–∫–∞',
      '–ü–∏—Ä–æ–≥–∏ –ë–∞–ª–∑–∏—è',
      '–ú–µ–¥–æ–≤—ã–π –ø–ª–∞—Å—Ç',
      '–ü—Ä–æ—Ñ–∏—Ç—Ä–æ–ª–∏',
      '–ö–æ–Ω—Ñ–µ—Ç—ã-—Å–∞—Ö–∞—Ä',
      '–•–ª–µ–±',
      '–ß–∞–π',
      '–ú–æ–ª–æ–∫–æ',
      '–°–∞–ª—Ñ–µ—Ç–∫–∏',
    ],
  },
  {
    name: '–ë–∞–Ω–∫–µ—Ç 8500',
    price: 8500,
    description: '8500 —Ç–≥/—á–µ–ª + –Ω–∞–ø–∏—Ç–∫–∏ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞',
    dishes: [
      '–ë–µ—à–ø–∞—Ä–º–∞–∫',
      '–ú—è—Å–æ —Å –æ–≤–æ—â–∞–º–∏',
      '–§—Ä–∏–∫–∞—Å–µ —Å –∫—É—Ä–∏—Ü–µ–π, –≥—Ä–∏–±–∞–º–∏ –≤ —Å–ª–∏–≤–æ—á–Ω–æ–º —Å–æ—É—Å–µ',
      '–ê—Å—Å–æ—Ä—Ç–∏ (–±–µ–¥—Ä–æ –∑–∞–ø–µ—á–µ–Ω–Ω–æ–µ —Å –±–∞—Ä–±–µ–∫—é, —á–∏–≤–∞–ø—á–∏—á–∏, –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å –ø–æ-–¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∏)',
      '–¢–µ—Ñ—Ç–µ–ª–∏',
      '–ì–æ–ª—É–±—Ü—ã',
      '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å –ø–æ-–¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∏',
      '–†–∏—Å',
      '–ú—è—Å–Ω–∞—è –Ω–∞—Ä–µ–∑–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è (–∫–∞–∑—ã, —Å—ã—Ä, —É—Ç–∏–Ω–æ–µ —Ñ–∏–ª–µ, –∫—É—Ä–∏–Ω—ã–π —Ä—É–ª–µ—Ç)',
      '–ö—É—Ä–∏–Ω–æ–µ –∞—Å—Å–æ—Ä—Ç–∏ 3 –≤–∏–¥–∞ (KFC, –±–µ–¥—Ä–æ, –∫—Ä—ã–ª—ã—à–∫–∏ –≤ –º–µ–¥–æ–≤–æ-—Å–æ–µ–≤–æ–º —Å–æ—É—Å–µ)',
      '–†—É—Å—Å–∫–∞—è –∑–∞–∫—É—Å–∫–∞ —Å —Å–µ–ª–µ–¥–∫–æ–π',
      '–ë—É—Ç–µ—Ä–±—Ä–æ–¥–∏–∫–∏ —Å —Å–µ–ª–µ–¥–∫–æ–π',
      '–°–∫—É–º–±—Ä–∏—è –Ω–∞ –æ–≤–æ—â–Ω–æ–π –ø–æ–¥—É—à–∫–µ',
      '–°–∞–∑–∞–Ω –≥–æ—Ä—è—á–∏–π –≤ —Å–ª–∏–≤–æ—á–Ω–æ–º —Å–æ—É—Å–µ',
      '–°—É–¥–∞–∫ –∑–∞–ø–µ—á–µ–Ω–Ω—ã–π —Å –æ–≤–æ—â–∞–º–∏',
      '–°–∞–ª–∞—Ç –ê—Ç–∞-–ê–Ω–∞',
      '–°–∞–ª–∞—Ç –ê—Å—Å–æ—Ä—Ç–∏',
      '–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å',
      '–°–∞–ª–∞—Ç –ê–ª–∞—Ç–∞—É',
      '–°–∞–ª–∞—Ç –ú–∞–ª–∏–±—É',
      '–°–∞–ª–∞—Ç –ù–µ–∂–Ω–æ—Å—Ç—å',
      '–°–∞–ª–∞—Ç –î–∞–º—Å–∫–∏–π –∫–∞–ø—Ä–∏–∑',
      '–°–∞–ª–∞—Ç –ë–µ—Ä–µ–∑–∞',
      '–°–∞–ª–∞—Ç –õ—é–±–æ–≤–Ω–∏—Ü–∞',
      '–°–∞–ª–∞—Ç –ì—Ä–µ—á–µ—Å–∫–∏–π',
      '–°–∞–ª–∞—Ç –ê–∑–∏—è',
      '–°–∞–ª–∞—Ç –¢–±–∏–ª–∏—Å–∏',
      '–•–∏—Ç-—Å–∞–ª–∞—Ç —Å —Ö—Ä—É—Å—Ç—è—â–∏–º–∏ –±–∞–∫–ª–∞–∂–∞–Ω–∞–º–∏',
      '–ì–æ—Ä—è—á–∞—è —Å–∞–º—Å–∞',
      '–§—Ä—É–∫—Ç–æ–≤–∞—è –≤–∞–∑–∞',
      '–ü–∏—Ä–æ–≥–∏ –ë–∞–ª–∑–∏—è',
      '–ú–µ–¥–æ–≤—ã–π –ø–ª–∞—Å—Ç',
      '–ü—Ä–æ—Ñ–∏—Ç—Ä–æ–ª–ª–∏',
      '–ö–æ–Ω—Ñ–µ—Ç—ã-—Å–∞—Ö–∞—Ä',
      '–•–ª–µ–±',
      '–ß–∞–π',
      '–ú–æ–ª–æ–∫–æ',
      '–°–∞–ª—Ñ–µ—Ç–∫–∏',
    ],
  },
  {
    name: '–ë–∞–Ω–∫–µ—Ç 12000',
    price: 12000,
    description: '12000 —Ç–≥/—á–µ–ª + –Ω–∞–ø–∏—Ç–∫–∏ –æ—Ç –∑–∞–≤–µ–¥–µ–Ω–∏—è',
    dishes: [
      '–ë–µ—à–ø–∞—Ä–º–∞–∫',
      '–ú—è—Å–æ —Å –æ–≤–æ—â–∞–º–∏',
      '–§—Ä–∏–∫–∞—Å–µ —Å –∫—É—Ä–∏—Ü–µ–π, –≥—Ä–∏–±–∞–º–∏ –≤ —Å–ª–∏–≤–æ—á–Ω–æ–º —Å–æ—É—Å–µ',
      '–ê—Å—Å–æ—Ä—Ç–∏ (–±–µ–¥—Ä–æ –∑–∞–ø–µ—á–µ–Ω–Ω–æ–µ —Å –±–∞—Ä–±–µ–∫—é, —á–∏–≤–∞–ø—á–∏—á–∏, –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å –ø–æ-–¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∏)',
      '–¢–µ—Ñ—Ç–µ–ª–∏',
      '–ì–æ–ª—É–±—Ü—ã',
      '–°–µ–º–≥–∞ –∑–∞–ø–µ—á–µ–Ω–Ω–∞—è',
      '–†—ã–±–Ω—ã–µ –∫–æ—Ç–ª–µ—Ç—ã',
      '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å –ø–æ-–¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∏',
      '–û–≤–æ—â–∏',
      '–ú—è—Å–Ω–∞—è –Ω–∞—Ä–µ–∑–∫–∞ –ø—Ä–µ–º–∏—É–º (–∫–∞–∑—ã, —Å—ã—Ä, —è–∑—ã–∫ –≥–æ–≤—è–∂–∏–π, —É—Ç–∏–Ω–æ–µ —Ñ–∏–ª–µ)',
      '–ö—É—Ä–∏—Ü–∞ –∑–∞–ª–∏–≤–Ω–∞—è',
      '–ö—É—Ä–∏–Ω–æ–µ –∞—Å—Å–æ—Ä—Ç–∏ 3 –≤–∏–¥–∞ –Ω–∞ –≤—ã–±–æ—Ä (KFC, –±–µ–¥—Ä–æ, –∫—Ä—ã–ª—ã—à–∫–∏, –Ω–∞–≥–≥–µ—Ç—Å—ã, —É—Ç–∏–Ω–æ–µ —Ñ–∏–ª–µ)',
      '–°–∫—É–º–±—Ä–∏—è –Ω–∞ –æ–≤–æ—â–Ω–æ–π –ø–æ–¥—É—à–∫–µ',
      '–°–∞–∑–∞–Ω –≥–æ—Ä—è—á–∏–π –≤ —Å–ª–∏–≤–æ—á–Ω–æ–º —Å–æ—É—Å–µ',
      '–°—É–¥–∞–∫ –∑–∞–ø–µ—á–µ–Ω–Ω—ã–π —Å –æ–≤–æ—â–∞–º–∏',
      '–†—ã–±–Ω–∞—è –Ω–∞—Ä–µ–∑–∫–∞ (—Å–µ–º–≥–∞, –º–∞—Å–ª—è–Ω–∞—è —Ä—ã–±–∞, –±–∞–ª—ã–∫)',
      '–°–∞–ª–∞—Ç –ê—Ç–∞-–ê–Ω–∞',
      '–°–∞–ª–∞—Ç –ê—Å—Å–æ—Ä—Ç–∏',
      '–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å —Å –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏',
      '–°–∞–ª–∞—Ç –ê–ª–∞—Ç–∞—É',
      '–°–∞–ª–∞—Ç –ú–∞–ª–∏–±—É',
      '–°–∞–ª–∞—Ç –ù–µ–∂–Ω–æ—Å—Ç—å',
      '–°–∞–ª–∞—Ç –î–∞–º—Å–∫–∏–π –∫–∞–ø—Ä–∏–∑',
      '–°–∞–ª–∞—Ç –ë–µ—Ä–µ–∑–∞',
      '–°–∞–ª–∞—Ç –õ—é–±–æ–≤–Ω–∏—Ü–∞',
      '–°–∞–ª–∞—Ç –ì—Ä–µ—á–µ—Å–∫–∏–π',
      '–°–∞–ª–∞—Ç –ê–∑–∏—è',
      '–°–∞–ª–∞—Ç –¢–±–∏–ª–∏—Å–∏',
      '–•–∏—Ç-—Å–∞–ª–∞—Ç —Å —Ö—Ä—É—Å—Ç—è—â–∏–º–∏ –±–∞–∫–ª–∞–∂–∞–Ω–∞–º–∏',
      '–ì–æ—Ä—è—á–∞—è —Å–∞–º—Å–∞',
      '–§—Ä—É–∫—Ç–æ–≤–∞—è –≤–∞–∑–∞',
      '–ü–∏—Ä–æ–≥–∏ –ë–∞–ª–∑–∏—è',
      '–ú–µ–¥–æ–≤—ã–π –ø–ª–∞—Å—Ç',
      '–ü—Ä–æ—Ñ–∏—Ç—Ä–æ–ª–ª–∏',
      '–ö–æ–Ω—Ñ–µ—Ç—ã-—Å–∞—Ö–∞—Ä',
      '–•–ª–µ–±',
      '–ß–∞–π',
      '–ú–æ–ª–æ–∫–æ',
      '–°–∞–ª—Ñ–µ—Ç–∫–∏',
      '–í–æ–¥–∫–∞',
      '–ö–æ–ª–∞',
      '–í–æ–¥–∞ –Ω–µ–≥–∞–∑',
      '–í–æ–¥–∞ –≥–∞–∑',
      '–î–æ–º–∞—à–Ω–∏–π –∫–æ–º–ø–æ—Ç',
    ],
  },
]

async function importData() {
  console.log('üöÄ Starting import of banquet menus...')

  try {
    // Get current user (you need to be logged in)
    const { data: { user }, error: userError } = await supabase.auth.getUser()

    if (userError || !user) {
      console.error('‚ùå Error: Not authenticated. Please log in first.')
      console.log('You need to set SUPABASE_SERVICE_ROLE_KEY or be logged in')
      return
    }

    console.log(`‚úÖ Authenticated as user: ${user.email}`)

    // Get all unique dishes
    const allDishNames = new Set<string>()
    menusData.forEach(menu => {
      menu.dishes.forEach(dish => allDishNames.add(dish))
    })

    console.log(`üìù Found ${allDishNames.size} unique dishes`)

    // Import dishes
    const dishMap = new Map<string, string>() // name -> id

    for (const dishName of Array.from(allDishNames)) {
      // Check if dish already exists
      const { data: existing } = await supabase
        .from('dishes')
        .select('id')
        .eq('name', dishName)
        .eq('user_id', user.id)
        .single()

      if (existing) {
        dishMap.set(dishName, existing.id)
        console.log(`‚è≠Ô∏è  Dish "${dishName}" already exists`)
      } else {
        // Create new dish
        const { data: newDish, error } = await supabase
          .from('dishes')
          .insert({
            name: dishName,
            description: null,
            image_url: null,
            user_id: user.id,
          })
          .select('id')
          .single()

        if (error) {
          console.error(`‚ùå Error creating dish "${dishName}":`, error)
        } else {
          dishMap.set(dishName, newDish.id)
          console.log(`‚úÖ Created dish: ${dishName}`)
        }
      }
    }

    console.log(`\nüìã Importing ${menusData.length} menus...`)

    // Import menus
    for (const menuData of menusData) {
      // Check if menu already exists
      const { data: existingMenu } = await supabase
        .from('menus')
        .select('id')
        .eq('name', menuData.name)
        .eq('user_id', user.id)
        .single()

      let menuId: string

      if (existingMenu) {
        menuId = existingMenu.id
        console.log(`‚è≠Ô∏è  Menu "${menuData.name}" already exists`)

        // Update menu price
        await supabase
          .from('menus')
          .update({
            price: menuData.price,
            description: menuData.description,
          })
          .eq('id', menuId)
      } else {
        // Create new menu
        const { data: newMenu, error } = await supabase
          .from('menus')
          .insert({
            name: menuData.name,
            description: menuData.description,
            price: menuData.price,
            user_id: user.id,
          })
          .select('id')
          .single()

        if (error) {
          console.error(`‚ùå Error creating menu "${menuData.name}":`, error)
          continue
        }

        menuId = newMenu.id
        console.log(`‚úÖ Created menu: ${menuData.name} (${menuData.price} ‚Ç∏)`)
      }

      // Clear existing dish assignments
      await supabase
        .from('menu_dishes')
        .delete()
        .eq('menu_id', menuId)

      // Link dishes to menu
      const menuDishes = menuData.dishes
        .map((dishName, index) => {
          const dishId = dishMap.get(dishName)
          if (!dishId) {
            console.warn(`‚ö†Ô∏è  Dish "${dishName}" not found in map`)
            return null
          }
          return {
            menu_id: menuId,
            dish_id: dishId,
            position: index,
          }
        })
        .filter(Boolean)

      if (menuDishes.length > 0) {
        const { error } = await supabase
          .from('menu_dishes')
          .insert(menuDishes)

        if (error) {
          console.error(`‚ùå Error linking dishes to menu "${menuData.name}":`, error)
        } else {
          console.log(`   üîó Linked ${menuDishes.length} dishes to menu`)
        }
      }
    }

    console.log('\nüéâ Import completed successfully!')
    console.log(`\nüìä Summary:`)
    console.log(`   - Dishes: ${dishMap.size}`)
    console.log(`   - Menus: ${menusData.length}`)

  } catch (error) {
    console.error('‚ùå Unexpected error:', error)
    throw error
  }
}

// Run the import
importData()
  .then(() => {
    console.log('\n‚ú® Done!')
    process.exit(0)
  })
  .catch((error) => {
    console.error('\nüí• Fatal error:', error)
    process.exit(1)
  })